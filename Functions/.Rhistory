###Randomization#######################
#Create a sample size Vector
sample_size <- 8
#Create a repeat vector for iteration which is used in the for loop
n_rep <- 1000
for(i in 1:n_rep){
sample <- sample(mpg$hwy, sample_size)
s_means[i] <- mean(sample)
}
mean(mpg$hwy)
library(ggplot2)
library(dplyr)
library(reshape)
library(gapminder)
mean(mpg$hwy)
###Randomization#######################
#Create a sample size Vector
sample_size <- 8
###Randomization#######################
#Create a sample size Vector
sample_size <- 30
#Create a repeat vector for iteration which is used in the for loop
n_rep <- 100000
#Empty Vector to store results
s_means <- rep(NA, n_rep)
for(i in 1:n_rep){
sample <- sample(mpg$hwy, sample_size)
s_means[i] <- mean(sample)
}
hist(s_means$hwy)
hist(s_means)
hist(mpg$hwy)
hist(s_means)
abline(v = mpg$hwy, col = "red")
abline(v = mean(mpg$hwy), col = "red")
abline(v = mean(mpg$hwy), col = "red")
hist(s_means)
hist(mpg$hwy)
abline(v = mean(mpg$hwy), col = "red")
abline(v = mean(mpg$hwy), col = "red")
cyls <- unique(mpg$cyl)
n_groups <- length(cyl)
sample_mean <- rep(NA, n_groups)
cis <- matrix(nrow= n_groups, ncol=2)
for(i in 1:n_groups){
#sample
#extract relevant data
rows <- which(sample$cyl == cyls[i])
observations <- mpg$hwy[rows]
#Store Sample mean
sample_mean[i] <- mean(observations)
#Construct CI
stdev <- sd(observations)
n <- length(observations)
se_mean <- stdev/sqrt(n)
#Store CI
cis[i,1] <- sample_mean[i] -2 * se_mean #formula for
cis[i,2] <- sample_mean[i]+2 * se_mean
}
cis
plot(mpg$cyl, mpg$hwy, col = "darkgrey")
points(x=cyls, y = sample_mean, col = "red")
segments(x0=cyls, x1 = cyls, y0=cis[,1], y1= cis[,2])
cyls <- unique(mpg$cyl)
n_groups <- length(cyl)
sample_mean <- rep(NA, n_groups)
cis <- matrix(nrow= n_groups, ncol=2)
cyls <- unique(mpg$cyl)
n_groups <- length(cyl)
n_groups <- length(cyls)
sample_mean <- rep(NA, n_groups)
cis <- matrix(nrow= n_groups, ncol=2)
for(i in 1:n_groups){
#sample
#extract relevant data
rows <- which(sample$cyl == cyls[i])
observations <- mpg$hwy[rows]
#Store Sample mean
sample_mean[i] <- mean(observations)
#Construct CI
stdev <- sd(observations)
n <- length(observations)
se_mean <- stdev/sqrt(n)
#Store CI
cis[i,1] <- sample_mean[i] -2 * se_mean #formula for
cis[i,2] <- sample_mean[i]+2 * se_mean
}
####simulating binomial (fair coin)##########
outcomes <- c("H", "M")
# Simulate a fair coin 100 times with replacement (independent)
sim_fair_coin <- sample(outcomes, size = 100000, replace = TRUE)
# How many heads and tails in flipping the coin 100 times
table(sim_fair_coin)
coin <- calc_streak(sim_fair_coin)
barplot(table(coin))
Simulating the shots by Kobe Bryant
Simulating a basketball player who has independent shots uses the same mechanism that we use to simulate a coin flip. Simulate a single shot from an independent shooter with a shooting percentage of 45% (percentage of hits by Kobe).
set.seed(121213)
n = 50000
outcomes <- c("H", "M")
p <- 0.45
sim_basket <- sample(0:1, n, prob = c(1 - p, p), replace = TRUE)
s <- cumsum(sim_basket)
r <- s/(1:n)
lo <- max(c(0, p - 0.1))
hi <- min(c(1, p + 0.1))
plot(r, ylim = c(lo, hi), type = "l", main = "Number of hits made by the independent Shooter",
ylab = "Probability of a a hit")
lines(c(0, n), c(p, p))
# Simulate a fair coin 100 times with replacement (independent)
sim_fair_coin <- sample(outcomes, size = 100000, replace = TRUE)
# How many heads and tails in flipping the coin 100 times
table(sim_fair_coin)
coin <- calc_streak(sim_fair_coin)
####simulating binomial (fair coin)##########
outcomes <- c("H", "M")
# Simulate a fair coin 100 times with replacement (independent)
sim_fair_coin <- sample(outcomes, size = 100000, replace = TRUE)
# How many heads and tails in flipping the coin 100 times
table(sim_fair_coin)
coin <- calc_streak(sim_fair_coin)
barplot(table(coin))
Simulating the shots by Kobe Bryant
Simulating a basketball player who has independent shots uses the same mechanism that we use to simulate a coin flip. Simulate a single shot from an independent shooter with a shooting percentage of 45% (percentage of hits by Kobe).
set.seed(121213)
n = 50000
outcomes <- c("H", "M")
p <- 0.45
sim_basket <- sample(0:1, n, prob = c(1 - p, p), replace = TRUE)
s <- cumsum(sim_basket)
r <- s/(1:n)
lo <- max(c(0, p - 0.1))
hi <- min(c(1, p + 0.1))
plot(r, ylim = c(lo, hi), type = "l", main = "Number of hits made by the independent Shooter",
ylab = "Probability of a a hit")
lines(c(0, n), c(p, p))
coin <- calc_streak(sim_fair_coin)
#Inference Function.
load(url('http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata'))
#' Calculate hit streaks.
#'
#' @param x A data frame or character vector of hits (\code{"H"}) and misses (\code{"M"}).
#' @return A data frame with one column, \code{length}, containing the length of each hit streak.
#' @examples
#' data(kobe_basket)
#' calc_streak(kobe_basket$shot)
#'
#' @export
calc_streak = function(x)
{
if (!is.atomic(x))
x = x[,1]
if (any(!x %in% c("H","M")))
stop('Input should only contain hits ("H") and misses ("M")')
y = rep(0,length(x))
y[x == "H"] = 1
y = c(0, y, 0)
wz = which(y == 0)
streak = diff(wz) - 1
return(data.frame(length = streak))
}
#oilabs package (sample and Repeat 'n' times)
rep_sample_n <- function(tbl, size, replace = FALSE, reps = 1)
{
n <- nrow(tbl)
i <- unlist(replicate(reps, sample.int(n, size, replace = replace), simplify = FALSE))
rep_tbl <- cbind(replicate = rep(1:reps,rep(size,reps)), tbl[i,])
dplyr::group_by(rep_tbl, replicate)
}
####simulating binomial (fair coin)##########
outcomes <- c("H", "M")
# Simulate a fair coin 100 times with replacement (independent)
sim_fair_coin <- sample(outcomes, size = 100000, replace = TRUE)
# How many heads and tails in flipping the coin 100 times
table(sim_fair_coin)
coin <- calc_streak(sim_fair_coin)
barplot(table(coin))
Simulating the shots by Kobe Bryant
Simulating a basketball player who has independent shots uses the same mechanism that we use to simulate a coin flip. Simulate a single shot from an independent shooter with a shooting percentage of 45% (percentage of hits by Kobe).
set.seed(121213)
n = 50000
outcomes <- c("H", "M")
p <- 0.45
sim_basket <- sample(0:1, n, prob = c(1 - p, p), replace = TRUE)
s <- cumsum(sim_basket)
r <- s/(1:n)
lo <- max(c(0, p - 0.1))
hi <- min(c(1, p + 0.1))
plot(r, ylim = c(lo, hi), type = "l", main = "Number of hits made by the independent Shooter",
ylab = "Probability of a a hit")
lines(c(0, n), c(p, p))
barplot(table(coin))
#create vector for factors
cut_vec <- unique(diamonds$cut)
#create group length for for loop
n_groups <- length(cut_vec)
library(dplyr)
library(ggplot2)
#Look at data
names(diamonds)
str(diamonds)
#create vector for factors
cut_vec <- unique(diamonds$cut)
#create group length for for loop
n_groups <- length(cut_vec)
#open vec
sample_mean <- rep(NA, n_groups)
#run for loop
for(i in 1:n_groups){
rows <- which(diamonds$cut == cut_vec[i])
observations <- diamonds$price[rows]
sample_mean[i] <- mean(observations, na.rm = T)
}
plot(diamonds$cut, diamonds$price, col = "darkgrey")
points(x=cut_vec, y = sample_mean, col = "red")
#Look and see if the mean is truly different for Ideal vs Fair
Premium <- as.data.frame(diamonds[diamonds$cut == "Premium",])
Fair <- as.data.frame(diamonds[diamonds$cut == "Fair",])
wilcox.test(Premium$price~Fair$price)
t.test(Premium$price,Fair$price, var.equal = T)
diamonds
names(diamonds)
color_vec <- unique(diamonds$color)
n_groups <- length(color_vec)
color_vec <- unique(diamonds$color)
n_groups <- length(color_vec)
sample_mean <- rep(NA, n_groups)
for(i in 1:n_groups){
rows <- which(diamonds$color == color_vec[i])
observations <- diamonds$color[rows]
sample_mean[i] <- mean(observations)
}
color_vec <- unique(diamonds$color)
n_groups <- length(color_vec)
sample_mean <- rep(NA, n_groups)
for(i in 1:n_groups){
rows <- which(diamonds$color == color_vec[i])
observations <- diamonds$color[rows]
sample_mean[i] <- mean(observations$price)
}
color_vec <- unique(diamonds$color)
n_groups <- length(color_vec)
sample_mean <- rep(NA, n_groups)
for(i in 1:n_groups){
rows <- which(diamonds$color == color_vec[i])
observations <- diamonds$price[rows]
sample_mean[i] <- mean(observations)
}
hist(sample_mean)
barplot(sample_mean)
points(x = color_vec, y = sample_mean)
color_vec <- unique(diamonds$color)
n_groups <- length(color_vec)
sample_mean <- rep(NA, n_groups)
for(i in 1:n_groups){
rows <- which(diamonds$color == color_vec[i])
observations <- diamonds$price[rows]
sample_mean[i] <- mean(observations)
}
plot(diamonds$color, diamonds$price)
points(x = color_vec, y = sample_mean)
t.test(diamonds[diamonds$color == "E"], diamonds[diamonds$color == "J"])
t.test(diamonds[diamonds$color == "E",], diamonds[diamonds$color == "J",])
t.test(diamonds[diamonds$color == "F",], diamonds[diamonds$color == "J",])
t.test(as.data.frame((diamonds[diamonds$color == "F",], diamonds[diamonds$color == "J",]))
t.test(as.data.frame((diamonds[diamonds$color == "F",], diamonds[diamonds$color == "J",])))
t.test(as.data.frame(diamonds[diamonds$color == "F",], diamonds[diamonds$color == "J",]))
colorf <- diamonds[diamonds$color == "F",]
nrow(colorf)
colorj <- diamonds[diamonds$color == "J",]
t.test(colorf, colorj)
View(colorj)
t.test(colorf$price, colorj$price)
t.test(colorf$price, colorj$price)
colorf <- diamonds[diamonds$color == "E",]
colorj <- diamonds[diamonds$color == "D",]
t.test(colorf$price, colorj$price)
colorf <- diamonds[diamonds$color == "I",]
colorj <- diamonds[diamonds$color == "J",]
View(colorj)
plot(diamonds$color, diamonds$price)
points(x = color_vec, y = sample_mean)
t.test(colorf$price, colorj$price)
sample_mean
